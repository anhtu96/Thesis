<?xml version='1.0' encoding='UTF-8'?>

<!DOCTYPE properties SYSTEM 'http://java.sun.com/dtd/properties.dtd'>

<properties>

    <!-- SERVER CONFIG -->

    <entry key='web.enable'>true</entry>
    <!--<entry key='web.address'></entry>-->
    <entry key='web.port'>99</entry>
    <!--<entry key='web.application'>../traccar-web/traccar-web.war</entry>
    <entry key='web.old'>true</entry>-->
    <entry key='web.path'>web</entry>
    <entry key='web.debug'>true</entry>
    <entry key='web.console'>true</entry>
    <entry key='web.timeout'>30000</entry>

    <entry key='geocoder.enable'>true</entry>
    <entry key='geocoder.type'>nominatim</entry>
    <entry key='geocoder.url'>http://nominatim.openstreetmap.org/reverse</entry>

    <entry key='location.enable'>false</entry>
    <entry key='location.key'>fake</entry>
    <entry key='location.mcc'>260</entry>
    <entry key='location.mnc'>2</entry>

    <entry key='distance.enable'>true</entry>

    <!--<entry key='filter.enable'>true</entry>
    <entry key='filter.limit'>3600</entry>
    <entry key='filter.invalid'>true</entry>
    <entry key='filter.zero'>true</entry>
    <entry key='filter.duplicate'>true</entry>
    <entry key='filter.distance'>50</entry>-->

    <!--<entry key='forward.enable'>true</entry>
    <entry key='forward.url'>http://example.com:8080/gprmc/Data?id={uniqueId}&amp;code=0x0000&amp;gprmc={gprmc}</entry>-->

    <entry key='logger.enable'>true</entry>
    <entry key='logger.level'>all</entry>
    <entry key='logger.file'>target/tracker-server.log</entry>

    <entry key='deviceManager.lookupGroupsAttribute'>true</entry>

    <entry key='event.enable'>true</entry>
    <entry key='event.overspeedHandler'>true</entry>
    <entry key='event.overspeed.notRepeat'>true</entry>
    <entry key='event.motionHandler'>true</entry>
    <entry key='event.geofenceHandler'>true</entry>
    <entry key='event.alertHandler'>true</entry>
    <entry key='event.ignitionHandler'>true</entry>

    <!--<entry key='event.forward.enable'>true</entry>
    <entry key='event.forward.url'>http://localhost/</entry>
    <entry key='event.forward.header'>
        Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l
    </entry>-->

    <!--<entry key='mail.smtp.host'>smtp.example.com</entry>
    for STARTTLS
    <entry key='mail.smtp.port'>587</entry>
    <entry key='mail.smtp.starttls.enable'>true</entry>
    for SSL
    <entry key='mail.smtp.port'>465</entry>
    <entry key='mail.smtp.ssl.enable'>true</entry>
    for self-signed server sertificates
    <entry key='mail.smtp.ssl.trust'>smtp.example.com</entry>

    <entry key='mail.smtp.from'>traccar@example.com</entry>

    <entry key='mail.smtp.auth'>true</entry>
    <entry key='mail.smtp.username'>traccar@example.com</entry>
    <entry key='mail.smtp.password'>password</entry>-->

    <!-- DATABASE CONFIG -->

    <!--<entry key='database.driverFile'>hsqldb.jar</entry>
<entry key='database.driver'>org.h2.Driver</entry>
<entry key='database.url'>jdbc:h2:./target/database</entry>
<entry key='database.user'>sa</entry>
<entry key='database.password'></entry>
    -->
    <entry key='database.driverFile'>C:\Users\Le Duc Huy\Documents\NetBeansProjects\energy\Microsoft JDBC Driver 4.0 for SQL Server\sqljdbc_4.0\enu\sqljdbc4.jar</entry>	
    <entry key='database.driver'>com.microsoft.sqlserver.jdbc.SQLServerDriver</entry>
    <entry key='database.url'>jdbc:sqlserver://localhost;databaseName=data_gps37</entry>
    <entry key='database.user'>sa</entry>
    <entry key='database.password'>sa</entry>

    <entry key='database.ignoreUnknown'>true</entry>

    <entry key='database.xml'>false</entry>
    <entry key='database.saveOriginal'>true</entry>

    <entry key='database.changelog'>./schema/changelog-master.xml</entry>

    <entry key='database.positionsHistoryDays'>7</entry>

    <entry key='database.selectServers'>
        SELECT * FROM server;
    </entry>

    <entry key='database.updateServer'>
        UPDATE server SET
        registration = :registration,
        readonly = :readonly,
        map = :map,
        bingKey = :bingKey,
        mapUrl = :mapUrl,
        distanceUnit = :distanceUnit,
        speedUnit = :speedUnit,
        latitude = :latitude,
        longitude = :longitude,
        zoom = :zoom,
        twelveHourFormat = :twelveHourFormat,
        attributes = :attributes
        WHERE id = :id;
    </entry>

    <entry key='database.loginUser'>
        SELECT * FROM users
        WHERE email = :email;
    </entry>

    <entry key='database.selectUser'>
        SELECT * FROM users
        WHERE id = :id;
    </entry>

    <entry key='database.selectUsersAll'>
        SELECT * FROM users;
    </entry>

    <entry key='database.insertUser'>
        INSERT INTO users (name, email, hashedPassword, salt, admin, map, distanceUnit, speedUnit, latitude, longitude, zoom, twelveHourFormat, attributes)
        VALUES (:name, :email, :hashedPassword, :salt, :admin, :map, :distanceUnit, :speedUnit, :latitude, :longitude, :zoom, :twelveHourFormat, :attributes);
    </entry>

    <entry key='database.updateUser'>
        UPDATE users SET
        name = :name,
        email = :email,
        admin = :admin,
        map = :map,
        distanceUnit = :distanceUnit,
        speedUnit = :speedUnit,
        latitude = :latitude,
        longitude = :longitude,
        zoom = :zoom,
        twelveHourFormat = :twelveHourFormat,
        attributes = :attributes
        WHERE id = :id;
    </entry>

    <entry key='database.updateUserPassword'>
        UPDATE users SET hashedPassword = :hashedPassword, salt = :salt WHERE id = :id;
    </entry>

    <entry key='database.deleteUser'>
        DELETE FROM users WHERE id = :id;
    </entry>

    <entry key='database.selectDevicePermissions'>
        SELECT userId, deviceId FROM user_device;
    </entry>

    <entry key='database.selectGroupPermissions'>
        SELECT userId, groupId FROM user_group;
    </entry>

    <entry key='database.selectDevicesAll'>
        SELECT * FROM devices;
    </entry>

    <entry key='database.insertDevice'>
        INSERT INTO devices (name, uniqueId, groupId, attributes) VALUES (:name, :uniqueId, :groupId, :attributes);
    </entry>

    <entry key='database.updateDevice'>
        UPDATE devices SET name = :name, uniqueId = :uniqueId, groupId = :groupId, attributes = :attributes WHERE id = :id;
    </entry>

    <entry key='database.updateDeviceStatus'>
        UPDATE devices SET lastUpdate = :lastUpdate WHERE id = :id;
    </entry>

    <entry key='database.deleteDevice'>
        DELETE FROM devices WHERE id = :id;
    </entry>

    <entry key='database.linkDevice'>
        INSERT INTO user_device (userId, deviceId) VALUES (:userId, :deviceId);
    </entry>

    <entry key='database.unlinkDevice'>
        DELETE FROM user_device WHERE userId = :userId AND deviceId = :deviceId;
    </entry>

    <entry key='database.selectGroupsAll'>
        SELECT * FROM groups;
    </entry>

    <entry key='database.insertGroup'>
        INSERT INTO groups (name, groupId, attributes) VALUES (:name, :groupId, :attributes);
    </entry>

    <entry key='database.updateGroup'>
        UPDATE groups SET name = :name, groupId = :groupId, attributes = :attributes WHERE id = :id;
    </entry>

    <entry key='database.deleteGroup'>
        DELETE FROM groups WHERE id = :id;
    </entry>

    <entry key='database.linkGroup'>
        INSERT INTO user_group (userId, groupId) VALUES (:userId, :groupId);
    </entry>

    <entry key='database.unlinkGroup'>
        DELETE FROM user_group WHERE userId = :userId AND groupId = :groupId;
    </entry>

    <entry key='database.selectPositions'>
        SELECT * FROM positions WHERE deviceId = :deviceId AND fixTime BETWEEN :from AND :to ORDER BY fixTime;
    </entry>

    <entry key='database.insertPosition'>
        INSERT INTO positions (deviceId, protocol, serverTime, deviceTime, fixTime, valid, latitude, longitude, altitude, speed, course, address, attributes)
        VALUES (:deviceId, :protocol, :now, :deviceTime, :fixTime, :valid, :latitude, :longitude, :altitude, :speed, :course, :address, :attributes);
    </entry>

    <entry key='database.selectLatestPositions'>
        SELECT * FROM positions WHERE id IN (SELECT positionId FROM devices);
    </entry>

    <entry key='database.updateLatestPosition'>
        UPDATE devices SET positionId = :id WHERE id = :deviceId;
    </entry>

    <entry key='database.selectEvent'>
        SELECT * FROM events WHERE id = :id;
    </entry>

    <entry key='database.insertEvent'>
        INSERT INTO events (type, serverTime, deviceId, positionId, geofenceId, attributes)
        VALUES (:type, :serverTime, :deviceId, :positionId, :geofenceId, :attributes);
    </entry>

    <entry key='database.selectEvents'>
        SELECT * FROM events WHERE deviceId = :deviceId AND type LIKE :type AND serverTime BETWEEN :from AND :to ORDER BY serverTime DESC;
    </entry>

    <entry key='database.selectGeofence'>
        SELECT * FROM geofences
        WHERE id = :id;
    </entry>

    <entry key='database.selectGeofencesAll'>
        SELECT * FROM geofences;
    </entry>

    <entry key='database.insertGeofence'>
        INSERT INTO geofences (name, description, area, attributes)
        VALUES (:name, :description, :area, :attributes);
    </entry>

    <entry key='database.updateGeofence'>
        UPDATE geofences SET
        name = :name,
        description = :description,
        area = :area,
        attributes = :attributes
        WHERE id = :id;
    </entry>

    <entry key='database.deleteGeofence'>
        DELETE FROM geofences WHERE id = :id;
    </entry>

    <entry key='database.selectGeofencePermissions'>
        SELECT userId, geofenceId FROM user_geofence;
    </entry>

    <entry key='database.linkGeofence'>
        INSERT INTO user_geofence (userId, geofenceId) VALUES (:userId, :geofenceId);
    </entry>

    <entry key='database.unlinkGeofence'>
        DELETE FROM user_geofence WHERE userId = :userId AND geofenceId = :geofenceId;
    </entry>

    <entry key='database.selectGroupGeofences'>
        SELECT groupId, geofenceId FROM group_geofence;
    </entry>

    <entry key='database.linkGroupGeofence'>
        INSERT INTO group_geofence (groupId, geofenceId) VALUES (:groupId, :geofenceId);
    </entry>

    <entry key='database.unlinkGroupGeofence'>
        DELETE FROM group_geofence WHERE groupId = :groupId AND geofenceId = :geofenceId;
    </entry>

    <entry key='database.selectDeviceGeofences'>
        SELECT deviceId, geofenceId FROM device_geofence;
    </entry>

    <entry key='database.linkDeviceGeofence'>
        INSERT INTO device_geofence (deviceId, geofenceId) VALUES (:deviceId, :geofenceId);
    </entry>

    <entry key='database.unlinkDeviceGeofence'>
        DELETE FROM device_geofence WHERE deviceId = :deviceId AND geofenceId = :geofenceId;
    </entry>

    <entry key='database.selectNotifications'>
        SELECT * FROM notifications;
    </entry>

    <entry key='database.insertNotification'>
        INSERT INTO notifications (userId, type, attributes)
        VALUES (:userId, :type, :attributes);
    </entry>

    <entry key='database.updateNotification'>
        UPDATE notifications SET
        userId = :userId,
        type = :type,
        attributes = :attributes
        WHERE id = :id;
    </entry>

    <entry key='database.deleteNotification'>
        DELETE FROM notifications WHERE id = :id;
    </entry>

    <entry key='database.deletePositions'>
        DELETE FROM positions WHERE serverTime &lt; :serverTime AND id NOT IN (SELECT positionId FROM devices);
    </entry>

    <!-- PROTOCOL CONFIG -->

    <entry key='dv103.port'>5001</entry>
   

</properties>
